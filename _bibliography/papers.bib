---
---

@InProceedings{ijcai23,
  author	= {Jinchun Du and Bojie Shen and Shizhe Zhao and Muhammad Aamir Cheema and Adel N. Toosi},
  title		= {Efficient Object Search in Game Maps},
  booktitle	= {Proceedings of International Joint
		  Conference on Artificial Intelligence, {IJCAI}},
  publisher	= {},
  url = {https://www.ijcai.org/proceedings/2023/0618.pdf},
  year		= {2023}
}

@InProceedings{socs23,
  author	= {Shizhe Zhao and Daniel Harabor and Peter J. Stuckey},
  title		= {Reducing Redundant Work in Jump Point Search},
  booktitle	= {Proceedings of the 16th International Symposium on Combinatorial Search, {SOCS} 2023},
  publisher	= {{AAAI} Press},
  url = {https://ojs.aaai.org/index.php/SOCS/article/download/27291/27064},
  selected = {true},
  year		= {2023},
  abstract = {Despite the existence of various fast preprocessing-based approaches for single-agent pathfinding on gridmaps, online approaches are still preferable in dynamic environments where obstacles may appear or disappear on the map between different queries.<br>
Jump Point Search (JPS) is a state-of-the-art algorithm for online pathfinding on grids. It utilises a local pruning policy and a successor generation policy to accelerate A* search by two orders of magnitude. However, JPS may exhibit pathological behaviors and become inefficient in certain map topologies that are common in dynamic environments.<br>
In this work, we investigate the root cause of JPS's pathological behaviors and propose a new reasoning technique based on geometric constraints to address these issues on-the-fly. The new approach, called Constrained JPS, can achieve up to a 7x speedup, and this improvement can be up to 14x in pathological setups. An interesting direction for future research is to apply Constrained JPS to high-dimensional grid-based pathfinding problems. For example, in drone navigation problems, environments are sometimes modeled as 3D voxel gridmaps. JPS encounters similar pathological behaviors in this type of environment. In multi-agent pathfinding problems, a low-level single-agent planner needs to handle temporal obstacles, where obstacles can move, and the environment changes during the query.
    }
}

@inproceedings{DBLP:conf/socs/ZhaoTH18,
  author        = {Shizhe Zhao and David Taniar and Daniel Damir Harabor},
  editor        = {Vadim Bulitko and Sabine Storandt},
  title         = {Fast k-Nearest Neighbor on a Navigation Mesh},
  booktitle     = {Proceedings of the Eleventh International Symposium on Combinatorial Search, {SOCS} 2018, Stockholm, Sweden - 14-15 July 2018},
  pages         = {124--132},
  publisher     = {{AAAI} Press},
  year          = {2018},
  url           = {https://aaai.org/ocs/index.php/SOCS/SOCS18/paper/view/17973},
  timestamp     = {Tue, 24 Jul 2018 20:17:24 +0200},
  biburl        = {https://dblp.org/rec/bib/conf/socs/ZhaoTH18},
  selected = {true},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  abstract = {This work focuses on studying the k-nearest neighbor problem in a 2D Euclidean plane with obstacles (OkNN). An efficient OkNN algorithm can serve as a low-level solver to provide spatial information for a high-level task planner. For example, in an industrial warehouse setting, a robot may need to determine the k-closest storage locations where a specific inventory item can be found. A naive approach to solve this problem is to employ a single-source pathfinding algorithm to compute the shortest distance to all objects. However, with an increasing number of objects and the size of the map, two main challenges arise:<br>
              (1) Pruning unpromising candidates during the query processing;<br>
              (2) Efficiently computing the distance to multiple objects, especially when k is large.<br>
Traditional approaches rely on an incremental visibility graph, but they suffer from costly graph building and visibility checking. In this work, we developed a new algorithm that addresses the aforementioned challenges by representing the traversable space as a collection of convex polygons, known as a Navigation Mesh. We then adapted an <a href="https://www.ijcai.org/Proceedings/2017/0070.pdf" style="font-weight: bolder;">optimal navigation mesh algorithm </a> from the single-source single-target setting to the multi-target case. The new algorithm demonstrates orders of magnitude faster performance compared to visibility graph-based algorithms.<br>
In a <a href="https://www.ijcai.org/proceedings/2023/0618.pdf" style="font-weight: bolder;">subsequent study</a>, we further considered moving objects and extended our method to more complex application scenarios, e.g., autonomous sea-cleaning robots.
  }
}

@inproceedings{icaps19b,
  author        = {Mattia Chiari and Shizhe Zhao and Adi Botea and Alfonso Gerevini and Daniel Harabor and Alessandro Saetti and Matteo Salvetti and Peter J. Stuckey},
  title         = {Cutting the Size of Compressed Path Databases With Wildcards and Redundant Symbols},
  optcrossref   = {},
  optkey        = {},
  booktitle     = {Proceedings of the 29th International Conference on Automated Planning and Scheduling},
  year          = {2019},
  editor        = {Nir Lipovetzky and Eva Onaindia and David Smith},
  optvolume     = {},
  optnumber     = {},
  optseries     = {},
  pages         = {106--113},
  optmonth      = {},
  optaddress    = {},
  optorganization = {},
  publisher     = {AAAI Press},
  optnote       = {},
  url = {https://ojs.aaai.org/index.php/ICAPS/article/download/3465/3333},
  selected = {true},
  optannote     = {},
  abstract = {Single agent path planning on gridmaps is a long studied problem in robotics and computer games. In certain application scenarios, it is critical to reduce first-move lag,
    i.e., an agent needs to wait until it knows in which direction to move. Compressed Path Databases (CPDs) are a state-of-the-art approach (in terms of speed) for optimal pathfinding on gridmaps. Each CPD is simply a data structure that provides an optimal first move: from any cell s towards any cell t of the gridmap. Created during an offline preprocessing step, and exploited during a subsequent online phase, CPDs can be used to compute shortest paths or optimal first move quickly. A major drawback of CPDs is the potentially large size of the preprocessed data. In this work, we introduced an additional reasoning step in the first-move extraction process, which enabled us to further compress and prune the preprocessed data. Results show significant reductions in CPD size. For instance, on a map with 200k nodes, an uncompressed first move matrix requires 50GB, the previous work requires 500MB, while our approach only requires 9MB. Such size reduction allows us to deploy CPDs on edge devices (e.g., robots) instead of relying on a centralised planner. In subsequent studies, we enabled a <a href="https://ojs.aaai.org/index.php/ICAPS/article/download/6678/6532/" style="font-weight: bolder;">trade-off between size and optimality</a> and extended the application scenario to <a href="https://ojs.aaai.org/index.php/SOCS/article/download/18554/18343" style="font-weight: bolder;">road networks with dynamic traffic</a>.
      }
}
@inproceedings{icaps2020,
  author        = {Shizhe Zhao and Mattia Chiari and Adi Botea and Alfonso Gerevini and Daniel Harabor and Alessandro Saetti and Peter J. Stuckey},
  title         = {Bounded Suboptimal Path Planning with Compressed Path Databases},
  booktitle     = {Proceedings of the 30th International Conference on Automated Planning and Scheduling},
  year          = {2020},
  editor        = {Nir Lipovetzky and Eva Onaindia and David Smith},
  url = {https://ojs.aaai.org/index.php/ICAPS/article/download/6678/6532/},
  publisher     = {AAAI Press}
}

@inproceedings{DBLP:conf/socs/ZhaoTH21,
  author        = {Arthur Maheo and Shizhe Zhao and Afzaal Hassan and Daniel Damir Harabor and Peter Stuckey and Mark Wallace},
  editor        = {},
  title         = {Customised Shortest Paths Using a Distributed Reverse Oracle},
  booktitle     = {Proceedings of the Eleventh International Symposium on Combinatorial Search, {SOCS}},
  pages         = {},
  publisher     = {},
  year          = {2021},
  url           = {https://ojs.aaai.org/index.php/SOCS/article/download/18554/18343},
  timestamp     = {},
  biburl        = {},
  bibsource     = {}
}
